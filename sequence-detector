----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 05.06.2021 01:43:28
-- Design Name: 
-- Module Name: sequence_detector - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity sequence_detector is
 Port (signal clk: in std_logic;
       signal sequence: in std_logic;
       signal detector: out std_logic;
       signal reset: in std_logic);
end sequence_detector;

architecture Behavioral of sequence_detector is
type state_type is (default, A, B, C, D);
signal state_reg, state_next: state_type;

begin
process(clk, reset)
begin
if (reset = '1') then 
state_reg <= default;
elsif (clk'event and clk ='1') then
state_reg <= state_next;
end if;
end process;

sequence_detection: process(state_reg,sequence)
begin
state_next <= state_reg;

case state_reg is
when default =>
detector <= '0';
if sequence = '1' then
state_next <= A;
end if;

when A=>
if sequence = '1' then
state_next <= B;
else 
state_next<= default;
end if;

when B =>
if sequence = '0' then
state_next <= C;
end if;

when C=> 
if sequence = '1' then
state_next <= D;
else 
state_next <= default;
end if;
 
when D=>
detector <= '1';
if sequence = '0' then
state_next <= default;
else 
state_next <= A;
end if;

end case;

end process;

end Behavioral;
